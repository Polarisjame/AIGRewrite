@startuml Rewrite
title Rewrite

class AIGMan{
    rw::CPUSolver rwMan
    void Rewrite():rwman.Rewrite()
}

namespace rw{

    Struct Cut{
        int sign, leaves[4]; 保存Cut中节点，其中节点编号升序排列
        unsigned truthtable : 16;
        unsigned value : 11; Cut优先级
        unsigned nLeaves : 4; 保存Cut中节点数量
        bool used;
    }

    Struct TableNode {
        int val, next;
    }

    class CpuSolver{
        int[] levelCount 存储树中每层的结点数量
        int[] ref 每个结点的fanout数量
        int [] order 每个结点的拓扑顺序
        int *fanin
        int [] isDeleted
        Cut* bestCut
        GpuSolver* gpuSolver
        void Rewrite()
        void Init() 根据AIG图初始化一些变量
        void Reorder()
    }

    interface CPU::Rewrite{
        void ReadLibrary()
        void LevelCount() 根据各结点level得到levelcount的值，保存每个Level结点数量
        void GpuSolver::EnumerateAndPreEvaluate() 完成并行Cut枚举，Cut冗余消除以及并行验证
        void GpuSolver::GetResults()
        void GpuSolver::ReplaceSubgraphs()
        note "在ReplaceSubgraphs()后用CPU替换子图"
    }

    interface EnumerateAndPreEvaluate{
        void CutEnumerate() 对同一层节点并行枚举Cut，每个节点挑选CUT_SET_SIZE个优先级高的cut存储于GPUSolver->cuts中
        void BuildHashTable() 利用atomicCAS将节点插入hash表,val==id存储在P之后的位置，key在P之前链式保存
        void CalcMFFC() 根据每个Cut计算对应的MFFC
        void EvaluateNode() 对节点并行替换子图进行Evaluate

    }

    interface CutEnumerate{
        void CutFindValue() 得到Cut优先级
        void FindCut() 在Cut数组中找到空闲位置
        void MergeCut() 对a,b两个cut取并集创造新cut插入指定位置
        void CutFilter() 判断Cut是否冗余
    }

    class GpuSolver{
        void Init() 给GPU中的数据结构根据AIG结点数量分配显存
        void EnumerateAndPreEvaluate()
        void CopyLib() 将CPU的计算库信息拷贝到显存
        void GetResults() 将最佳Cut和最佳子图拷贝回CPU内存
        void ReplaceSubgraphs() 并行构造子图后续用CPU替换
        
        Cut[] cuts, []selectedCuts
        TableNode *hashtable, *newtable
        int *fanin, *isComplement, bestSubgraph
    }

    CpuSolver <|.. CPU::Rewrite
    CPU::Rewrite <|.. GpuSolver
    CPU::Rewrite <|.. EnumerateAndPreEvaluate
    EnumerateAndPreEvaluate <|.. CutEnumerate
}

AIGMan <|.. rw:CPUSolver

@enduml